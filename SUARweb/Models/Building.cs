//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SUARweb.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using SUARweb.Exporters;

    public partial class Building : IExportableEntity
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Building()
        {
            this.Apartments = new HashSet<Apartment>();
        }

        public int ID { get; set; }
        [DisplayName("Улица")]
        public string Street { get; set; }
        [DisplayName("Номер здания")]
        public int Number { get; set; }
        [DisplayName("Литера")]
        public string Litera { get; set; }
        [DisplayName("Район")]
        public int DistrictId { get; set; }
        [DisplayName("Тип планировки")]
        public int PlanningTypeId { get; set; }
        [DisplayName("Тип конструкции")]
        public int ConstructionTypeId { get; set; }
        [DisplayName("Год постройки")]
        public int BuildYear { get; set; }
        [DisplayName("Год капремонта")]
        public Nullable<int> OverhaulYear { get; set; }
        [DisplayName("Число этажей")]
        public int FloorCount { get; set; }
        [DisplayName("Консьерж")]
        public bool Concierge { get; set; }
        [DisplayName("Домофон")]
        public bool Domofon { get; set; }
        [DisplayName("Территория ограждена")]
        public bool Fence { get; set; }
        [DisplayName("Подземный паркинг")]
        public bool UndegroundParking { get; set; }
        [DisplayName("Детская площадка")]
        public bool Playground { get; set; }
        [DisplayName("Лифт")]
        public bool Elevator { get; set; }
        [DisplayName("Отопление")]
        public int HeatingTypeId { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Apartment> Apartments { get; set; }
        public virtual Construction_Type Construction_Type { get; set; }
        public virtual District District { get; set; }
        public virtual Heating_Type Heating_Type { get; set; }
        public virtual Planning_Type Planning_Type { get; set; }


        public string GetAdress()
        {
            return District.Settlement.Subject.Name + " ," +
                       District.Settlement.Settlement_Type.Type + " " +
                       District.Settlement.Name + ", " +
                       Street + ", д. " +
                       Number;
        }

        public Dictionary<string, dynamic> GetExportData()
        {
            return new Dictionary<string, dynamic>()
            {
                { "Субъект РФ", District.Settlement.Subject.Name },
                { "Населенный пункт", District.Settlement.Settlement_Type.Type + " " + District.Settlement.Name },
                { "Район", District.Name },
                { "Улица", Street },
                { "Номер", Number },
                { "Литера", Litera },
                { "Год постройки", BuildYear },
                { "Год капремонта", OverhaulYear },
                { "Тип конструкции", Construction_Type.ConstructionType },
                { "Тип отопления", Heating_Type.HeatingType },
                { "Тип планировки", Planning_Type.PlanningType },
                { "Консьерж", Concierge },
                { "Домофон", Domofon },
                { "Ограждения", Fence },
                { "Подземная парковка", UndegroundParking },
                { "Детская площадка", Playground },
                { "Лифт", Elevator },
            };
        }
    }
}
