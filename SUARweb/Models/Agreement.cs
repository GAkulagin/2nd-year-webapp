//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SUARweb.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using SUARweb.Exporters;
    using SUARweb.Models.CustomValidation;

    public partial class Agreement : IExportableEntity
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Agreement()
        {
            this.Payments = new HashSet<Payment>();
        }

        public int ID { get; set; }

        [DisplayName("Статус договора")]
        public int StatusId { get; set; }

        [DisplayName("Дата начала")]
        [Required(ErrorMessage = "Это поле обязательно")]
        [StartDate(ErrorMessage = "Дата начала не может быть меньше текущей даты")]
        public System.DateTime StartDate { get; set; }

        [DisplayName("Дата окончания")]
        [Required(ErrorMessage = "Это поле обязательно")]
        [CustomValidation(typeof(Agreement), "ValidateEndDate")]
        public System.DateTime EndDate { get; set; }

        [DisplayName("Частота платы")]
        public int PayFrequencyId { get; set; }

        [DisplayName("Арендная плата")]
        [Required(ErrorMessage = "Это поле обязательно")]
        [PaySum(ErrorMessage = "Неверный формат ввода")]
        public decimal PaySum { get; set; }

        [DisplayName("Арендатор")]
        public string RenterId { get; set; }

        [DisplayName("Квартира")]
        public int ApartmentId { get; set; }

        public virtual Agreement_Status Agreement_Status { get; set; }
        public virtual Apartment Apartment { get; set; }
        public virtual Client Client { get; set; }
        public virtual Pay_Frequency Pay_Frequency { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Payment> Payments { get; set; }

        
        public Dictionary<string, dynamic> GetExportData()
        {
            return new Dictionary<string, dynamic>()
            {
                { "Статус", Agreement_Status.Status },
                { "Арендатор", Client.GetPassportAndFullname() },
                { "Арендодатель", Apartment.Client.GetPassportAndFullname() },
                { "Квартира", Apartment.GetAdress() },
                { "Дата начала", StartDate },
                { "Дата окончания", EndDate },
                { "Сумма платы", PaySum },
                { "Частота платы", Pay_Frequency.Frequency },
            };
        }

        public static ValidationResult ValidateEndDate(object value, ValidationContext context)
        {
            var endDate = (DateTime)value;
            var agreement = context.ObjectInstance as Agreement;

            if (endDate.Date > agreement.StartDate.Date)
                return ValidationResult.Success;

            return new ValidationResult("Дата окончания должна быть больше даты начала");
        }
    }
}
